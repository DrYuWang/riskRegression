% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/basehazFast.R
\name{basehazFast}
\alias{basehazFast}
\title{Compute the baseline hazard}
\usage{
basehazFast(coxph, event, time, cause = 1, method)
}
\arguments{
\item{coxph}{the fitted coxph model}

\item{event}{the type of event corresponding to each observation [possible improvement: may be directly extracted from coxph ??]}

\item{time}{the time at which the event occured for each observation [possible improvement: may be directly extracted from coxph ??]}

\item{cause}{the event of interest}

\item{method}{the implementation to be used: "dt" or "cpp"}
}
\details{
"cpp" seems to be faster up to 10 000 observations. For very large number of observations "dt" seems faster [I do not understant why]
Because of the way of computing W, "cpp" is sensible to rounding error for instance when one coefficient is large compared to the others (then W -= exp(Xb) may be problematic)
}
\examples{

library(data.table)
library(rbenchmark)
library(prodlim)
library(rms)
library(testthat)

set.seed(10)
d <- SimSurv(1e6)
d$time <- round(d$time,1)
fit <- coxph(Surv(time,status)~X1 * X2,data=d, ties="breslow")
# table(duplicated(d$time))

#### check validity
res0 <- basehaz(fit, centered = FALSE)
res1 <- basehazFast(fit, d$status, d$time, method = "dt")
res2 <- basehazFast(fit, d$status, d$time, method = "cpp")
test_that("basehazFast",{
  expect_equal(res0, as.data.frame(res1))    
})

test_that("basehazFast",{
  expect_equal(res0, as.data.frame(res2))    
})

#### check timing
ben <- benchmark(replications=100,
basehaz(fit, centered = FALSE),
basehazFast(fit, d$status, d$time, method = "dt"),
basehazFast(fit, d$status, d$time, method = "cpp"),
columns=c('test', 'replications', 'elapsed',"user.self","sys.self")
)
ben
}

