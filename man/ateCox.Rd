% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ateCox.R
\name{ateCox}
\alias{ateCox}
\title{Compute the average treatment effect using CSC}
\usage{
ateCox(formula, model, predictor, data, treatment, contrasts = NULL, times,
  cause, B = 0, seed, handler = c("mclapply", "foreach"), mc.cores = 1,
  conf.level = 0.95, return.model = TRUE, verbose = TRUE, ...)
}
\arguments{
\item{formula}{formula argument for the model}

\item{model}{a non-empty character string naming the function to be called to estimate the outcome}

\item{predictor}{a method to be applied to the model to obtain the predicted outcome for each time and patient.}

\item{data}{data argument for CSC}

\item{treatment}{name of the column containing the treatment
variable}

\item{contrasts}{the levels of treatment variable to be compared}

\item{times}{time points at which to evaluate risks}

\item{cause}{the cause of interest}

\item{B}{the number of bootstrap replications used to
compute the confidence interval.}

\item{seed}{An integer used to generate seeds for bootstrap and to achieve
reproducibility of the bootstrap confidence intervals.}

\item{handler}{parallel handler for bootstrap. Either "mclapply" or
"sfClusterApplyLB"}

\item{mc.cores}{Passed on to \code{mclapply} or
\code{sfClusterApplyLB}. The number of cores to use, i.e. at
most how many child processes will be run simultaneously.  The
option is initialized from environment variable MC_CORES if
set.}

\item{conf.level}{the level for bootstrap confidence intervals}

\item{return.model}{Logical. if \code{TRUE} the fitted CSC is
returned as part of the output.}

\item{verbose}{Logical. If \code{TRUE} inform about estimated run
time.}

\item{...}{passed to CSC}
}
\value{
A list with: point estimates, bootstrap quantile confidence
    intervals model: the CSC model (optional)
}
\description{
Use the g-formula to estimate the average treatment effect
}
\details{
The predictor must have (at least) object, newdata, times, and cause as arguments.
}
\examples{
library(survival)
library(rms)

set.seed(10)
n <- 1e3

## Cox model
dtS <- sampleData(n,outcome="survival")
dtS$time <- round(dtS$time,1)
seqtimes <- sample(x = unique(sort(dtS$time)), size = 100) 
dtS$X1 <- factor(rbinom(n, prob = c(0.2,0.3,0.2) , size = 3), labels = paste0("T",0:3))

ateCox(formula = Surv(time,event)~ X1+X2, model = "cph", data = dtS, treatment = "X1", contrasts = NULL,
        times = 5:7, B = 3, y = TRUE, mc.cores=1)

## Cause specific cox model
dt <- sampleData(1e3,outcome="competing.risks")
dt$time <- round(dt$time,1)
seqtimes <- sample(x = unique(sort(dt$time)), size = 100) 
dt$X1 <- factor(rbinom(1e3, prob = c(0.2,0.3,0.2) , size = 3), labels = paste0("T",0:3))
ateCox(formula = Hist(time,event)~ X1+X2, model = "CSC", data = dt, treatment = "X1", contrasts = NULL,
        times = 5:7, cause = 1, B = 3, mc.cores=1)

}

