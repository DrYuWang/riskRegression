% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ateRobust.R
\name{ateRobust}
\alias{ateRobust}
\title{Compute the Average Treatment Effects using Double Robust Approach}
\usage{
ateRobust(data, formula.time, formula.censor, formula.treatment, times,
  treatment, fitter.cox = "coxph", efficient = TRUE,
  product.limit = FALSE, iid = FALSE)
}
\arguments{
\item{data}{[data.frame or data.table] Data set in which to evaluate the ATE.}

\item{formula.time}{[formula] The Cox model for the event of interest. Typically \code{Surv(time,event)~treatment}.}

\item{formula.censor}{[formula] The Cox model for the censoring. Typically \code{Surv(time,event==0)~treatment}.}

\item{formula.treatment}{[formula] The logistic model for the treatment. Typically \code{treatment~1}.}

\item{times}{[numeric] Time point at which to evaluate average treatment effects.}

\item{treatment}{[character] Name of the treatment variable. Must be binary.}

\item{fitter.cox}{[character] Routine to fit the Cox regression models.
If \code{coxph} use \code{survival::coxph} else use \code{rms::cph}.}

\item{efficient}{[logical] should the efficient estimates of IPW and AIPW be computed.
Can be time consuming for large dataset.}

\item{product.limit}{[logical] If \code{TRUE} the survival is computed using the product limit estimator.
Otherwise the exponential approximation is used (i.e. exp(-cumulative hazard)).}

\item{iid}{[logical] If \code{TRUE} add the influence function to the output.
For now the influence function is computed treating the survival probability, censoring probability,
and probability of being treated as known.}
}
\description{
Compute the average treatment effect (ATE) for a Cox regression model using five different approaches:
G-formula, inverse probability weighting (IPW), augmented inverse probability weighting (AIPW).
For IPW and AIPW both the non-efficient and efficient estimates are output. Experimental!
}
\examples{

library(survival)
library(lava)
library(data.table)

## generative model
mSimSurv <- lava::lvm()
lava::distribution(mSimSurv, ~a) <- lava::binomial.lvm(p = c(0.5))
lava::distribution(mSimSurv, ~w) <- lava::binomial.lvm(p = c(0.5))
lava::distribution(mSimSurv, "eventtime") <- lava::coxExponential.lvm(scale = 1)
lava::distribution(mSimSurv, "censtime") <- lava::coxExponential.lvm(scale = 1)
mSimSurv <- lava::eventTime(mSimSurv, time ~ min(eventtime = 1, censtime = 0), "event")
lava::regression(mSimSurv) <- eventtime ~ alpha*a + beta*w

## settings
alpha <- 0.3 
beta <- 0.4 

## check bias 
set.seed(10)
dt <- as.data.table(sim(mSimSurv, n = 1e4, p = c(alpha = alpha, beta = beta)))
setkeyv(dt, c("a","w"))

## True value
psi.TRUE <- c("surv.0" = exp(-1*exp(alpha*0+beta*0))*0.5 + exp(-1*exp(alpha*0+beta*1))*0.5,
              "surv.1" = exp(-1*exp(alpha*1+beta*0))*0.5 + exp(-1*exp(alpha*1+beta*1))*0.5)
psi.TRUE

## Approximate true value
dt[,.(surv = mean(eventtime>=1)),by = c("a")]

## Estimated value
res <- ateRobust(data = dt,
            formula.time = Surv(time, event) ~ strata(a,w),
            formula.censor = Surv(time, event==0) ~ strata(a,w),
            formula.treatment = a ~ w,
            times = 1,
            treatment = "a",
            efficient = FALSE,
            product.limit = FALSE)
res

## check efficient estimator
set.seed(10)
dtRed <- dt[sample.int(n = .N, size = 1e3, replace = FALSE)]
setkeyv(dtRed, c("a","w","time"))
dtRed[,max(time), by = c("a","w")]

res <- ateRobust(data = dtRed,
            formula.time = Surv(time, event) ~ strata(a,w), ## ~ a + w,##
            formula.censor = Surv(time, event==0) ~ strata(a,w), ## ~ a + w,##
            formula.treatment = a ~ w,
            times = 1,
            treatment = "a",
            efficient = TRUE,
            product.limit = TRUE)
res

}
