% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Score.R
\name{Score.list}
\alias{Score}
\alias{Score.list}
\title{Score risk predictions}
\usage{
\method{Score}{list}(object, formula, data, metrics = c("auc", "brier"),
  summary = NULL, plots = c("roc", "calibration", "pvalues"), cause = 1,
  times, landmarks, useEventTimes = FALSE, nullModel = TRUE,
  conf.int = 0.95, contrasts = TRUE, probs = c(0, 0.25, 0.5, 0.75, 1),
  censMethod = "ipcw", censModel = "cox", splitMethod, B, M, seed,
  trainseeds, ...)
}
\arguments{
\item{object}{List of risk predictions (see details and examples).}

\item{formula}{A formula which identifies the outcome (left hand
side). For right censored outcome, the right hand side of the
formula is used to estimate the IPCW model.}

\item{data}{Data set or table in which the formula can be
interpreted.}

\item{metrics}{Character vector specifying which metrics to
apply. Implemented are \code{"auc"} and \code{"Brier"}.}

\item{summary}{Character vector specifying which summary
statistics to apply to the predicted risks. Implemented is
\code{"riskQuantile"}.}

\item{plots}{Character vector specifying which plots to prepare.}

\item{cause}{Event of interest. Used for binary outcome \code{Y}
to specify that risks are risks of the event \code{Y=event}
and for competing risks outcome to specify the cause of
interest.}

\item{times}{For survival and competing risks outcome: list of
prediction horizons. All times which are greater than the
maximal observed time in the data set are removed.}

\item{landmarks}{Not yet implemented.}

\item{useEventTimes}{If \code{TRUE} add all unique event times to
argument \code{times}.}

\item{nullModel}{If \code{TRUE} fit the null model which ignores
the covariates and predicts the prevalence for all subjects.}

\item{conf.int}{Either logical or a numeric value between 0 and 1. \code{FALSE} prevents the 
computation confidence intervals. \code{TRUE} means compute 95 percent confidence 
intervals and corresponding p-values for AUC and Brier score. If set to 0.87, the 
level of significance is 13 percent.}

\item{contrasts}{Either logical or list of contrasts, i.e., positive integers mixed
with \code{0}, defining which.  If \code{TRUE} do all possible contrasts. For
example, when \code{object} has two elements and
\code{nullModel=TRUE} this is equivalent to
\code{list(c(0,1,2),c(1,2))} where \code{c(0,1,2)} codes for
two comparisons: 1 vs 0 and 2 vs 0 (positive integers refer to
elements of \code{object}, 0 refers to the benchmark null
model which ignores the covariates).  This again is equivalent
to explicitly setting \code{list(c(0,1),c(0,2),c(1,2))}. A
more complex example: Suppose object has 7 elements and you
want to do the following 3 comparisons: 6 vs 3, 2 vs 5 and 2
vs 3, you should set \code{contrasts=c(6,3),c(2,5,3)}.}

\item{probs}{Quantiles for retrospective summary statistics of the
predicted risks}

\item{censMethod}{Method for dealing with right censored
data. Either \code{"ipcw"} or \code{"pseudo"}.}

\item{censModel}{Model for estimating inverse probability of
censored weights.}

\item{splitMethod}{Method for cross-validation.}

\item{B}{Number of cross-validation steps.}

\item{M}{Size of subsamples for cross-validation. If specified it
has to be an integer smaller than the size of \code{data}.}

\item{seed}{Super seed for setting training data seeds when
randomly splitting the data for cross-validation.}

\item{trainseeds}{Seeds for training models during cross-validation.}

\item{...}{Not used}
}
\value{
Result list with scores and assessments of contrasts, i.e.,
    tests and confidence limits for difference in performance (AUC and Brier),
summaries and plots.
}
\description{
Method to Score risk markers and risk prediction models
}
\details{
We compute the Brier score and the area under the ROC curve. For
survival possibly with competing risk both are time-dependent.
}
\examples{
# binary outcome
library(lava)
set.seed(18)
learndat <- sampleData(100,outcome="binary")
testdat <- sampleData(40,outcome="binary")

# score logistic regression models
lr1 = glm(Y~X1+X2+X7+X9,data=learndat,family=binomial)
lr2 = glm(Y~X3+X5+X6,data=learndat,family=binomial)
Score(list("LR(X1+X2+X7+X9)"=lr1,"LR(X3+X5+X6)"=lr2),formula=Y~1,data=testdat)

# compute AUC for a list of continuous markers
markers = as.list(testdat[,1:5])
u=Score(markers,formula=Y~1,data=testdat,metrics=c("auc"))

# cross-validation
lr1a = glm(Y~X6,data=learndat,family=binomial)
lr2a = glm(Y~X7+X8+X9,data=learndat,family=binomial)
Score(list("LR1"=lr1a,"LR2"=lr2a),formula=Y~1,data=learndat,splitMethod="bootcv",B=3)

# survival outcome

# Score Cox regression models
library(survival)
library(rms)
library(prodlim)
set.seed(18)
trainSurv <- sampleData(100,outcome="survival")
testSurv <- sampleData(40,outcome="survival")
cox1 = coxph(Surv(time,event)~X1+X2+X7+X9,data=trainSurv, y=TRUE, x = TRUE)
cox2 = coxph(Surv(time,event)~X3+X5+X6,data=trainSurv, y=TRUE, x = TRUE)
Score(list("Cox(X1+X2+X7+X9)"=cox1,"Cox(X3+X5+X6)"=cox2),
      formula=Surv(time,event)~1,data=testSurv,conf.int=FALSE,times=c(5,8))

# time-dependent AUC for list of markers
survmarkers = as.list(testSurv[,1:5])
Score(survmarkers,
      formula=Surv(time,event)~1,metrics="auc",data=testSurv,
conf.int=TRUE,times=c(5,8))

# compare models on test data
Score(list("Cox(X1+X2+X7+X9)"=cox1,"Cox(X3+X5+X6)"=cox2),
      formula=Surv(time,event)~1,data=testSurv,conf.int=TRUE,times=c(5,8))

# crossvalidation models in traindata
Score(list("Cox(X1+X2+X7+X9)"=cox1,"Cox(X3+X5+X6)"=cox2),
      formula=Surv(time,event)~1,data=trainSurv,conf.int=TRUE,times=c(5,8),
splitMethod="bootcv",B=3)

# restrict number of comparisons
Score(list("Cox(X1+X2+X7+X9)"=cox1,"Cox(X3+X5+X6)"=cox2),
      formula=Surv(time,event)~1,data=trainSurv,contrasts=TRUE,
nullModel=FALSE,conf.int=TRUE,times=c(5,8),splitMethod="bootcv",B=3)

# competing risks outcome
set.seed(18)
trainCR <- sampleData(40,outcome="competing.risks")
testCR <- sampleData(40,outcome="competing.risks")
library(riskRegression)
library(cmprsk)
# Cause-specific Cox regression
csc1 = CSC(Hist(time,event)~X1+X2+X7+X9,data=trainCR)
csc2 = CSC(Hist(time,event)~X3+X5+X6,data=trainCR)
# Fine-Gray regression
fgr1 = FGR(Hist(time,event)~X1+X2+X7+X9,data=trainCR,cause=1)
fgr2 = FGR(Hist(time,event)~X3+X5+X6,data=trainCR,cause=1)
Score(list("CSC(X1+X2+X7+X9)"=csc1,"CSC(X3+X5+X6)"=csc2,
           "FGR(X1+X2+X7+X9)"=fgr1,"FGR(X3+X5+X6)"=fgr2),
      formula=Hist(time,event)~1,data=testCR,se.fit=TRUE,times=c(5,8))

}
\author{
Thomas A Gerds \email{tag@biostat.ku.dk} and Paul Blanche \email{paul.blanche@univ-ubs.fr}
}

